import json
import requests
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime, timezone
from hashlib import sha256
import hmac

# Setup Google Sheets API
SERVICE_ACCOUNT_FILE = 'path_to_your_json_file.json'
SCOPES = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
credentials = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
client = gspread.authorize(credentials)
spreadsheet = client.open('Make Pinterest')
sheet = spreadsheet.sheet1

# Amazon PA API Configuration
access_key = 'YOUR_AMAZON_PA_API_ACCESS_KEY'
secret_key = 'YOUR_AMAZON_PA_API_SECRET_KEY'
associate_tag = 'YOUR_AMAZON_ASSOCIATE_TAG'
url = 'https://webservices.amazon.fr/paapi5/searchitems'
payload = {
    "Marketplace": "www.amazon.fr",
    "PartnerType": "Associates",
    "PartnerTag": associate_tag,
    "Keywords": "Boheme Scandinave",
    "SearchIndex": "HomeAndKitchen",
    "ItemCount": 10,
    "Resources": [
        "ItemInfo.Title",
        "ItemInfo.ContentInfo",
        "Images.Primary.Large",
        "DetailPageURL"
    ]
}

def sign(key, msg):
    return hmac.new(key, msg.encode('utf-8'), sha256).digest()

def get_signature_key(key, date_stamp, region_name, service_name):
    k_date = sign(('AWS4' + key).encode('utf-8'), date_stamp)
    k_region = sign(k_date, region_name)
    k_service = sign(k_region, service_name)
    k_signing = sign(k_service, 'aws4_request')
    return k_signing

def create_signed_request():
    method = 'POST'
    service = 'execute-api'
    region = 'eu-west-1'
    endpoint = 'webservices.amazon.fr'
    request_parameters = json.dumps(payload)
    t = datetime.now(timezone.utc)
    amz_date = t.strftime('%Y%m%dT%H%M%SZ')
    date_stamp = t.strftime('%Y%m%d')
    canonical_uri = '/paapi5/searchitems'
    canonical_querystring = ''
    canonical_headers = f'host:{endpoint}\nx-amz-date:{amz_date}\n'
    signed_headers = 'host;x-amz-date'
    payload_hash = sha256(request_parameters.encode('utf-8')).hexdigest()
    canonical_request = f'{method}\n{canonical_uri}\n{canonical_querystring}\n{canonical_headers}\n{signed_headers}\n{payload_hash}'
    algorithm = 'AWS4-HMAC-SHA256'
    credential_scope = f'{date_stamp}/{region}/{service}/aws4_request'
    string_to_sign = f'{algorithm}\n{amz_date}\n{credential_scope}\n{sha256(canonical_request.encode("utf-8")).hexdigest()}'
    signing_key = get_signature_key(secret_key, date_stamp, region, service)
    signature = hmac.new(signing_key, string_to_sign.encode('utf-8'), sha256).hexdigest()
    authorization_header = f'{algorithm} Credential={access_key}/{credential_scope}, SignedHeaders={signed_headers}, Signature={signature}'
    headers = {
        'Content-Type': 'application/json',
        'X-Amz-Date': amz_date,
        'Authorization': authorization_header
    }
    return headers, request_parameters

headers, request_parameters = create_signed_request()
response = requests.post(url, headers=headers, data=request_parameters)

if response.status_code == 200:
    items = response.json().get('SearchResult', {}).get('Items', [])
    data = []
    for item in items:
        title = item['ItemInfo']['Title']['DisplayValue']
        description = item['ItemInfo']['ContentInfo']['ContentDescription']['DisplayValue'] if 'ContentDescription' in item['ItemInfo']['ContentInfo'] else 'N/A'
        image = item['Images']['Primary']['Large']['URL']
        link = item['DetailPageURL']
        data.append([title, description, image, link])
    sheet.update('A1', [['Title', 'Description', 'Image', 'Affiliate Link']])
    sheet.append_rows(data, table_range='A2')
    print("Data successfully inserted into Google Sheets.")
else:
    print(f"Error: {response.status_code}")
    print(response.json())
